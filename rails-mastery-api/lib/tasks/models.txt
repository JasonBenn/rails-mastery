class Answer < ActiveRecord::Base
  include VotableHelper
  attr_accessible :question_id, :text
  belongs_to :question, counter_cache: true
  belongs_to :user
  has_many :votes, as: :votable
  validates_presence_of :question, :user
end




class Content < ActiveRecord::Base
  attr_accessible :lesson_id, :url, :position, :start_time, :finish_time, :duration, :title
  belongs_to :lesson, inverse_of: :contents
  has_many :questions
  has_many :answers, through: :questions
  has_many :flashcards
  validates_presence_of :lesson, :url, :start_time, :finish_time
    validates_associated :lesson
  validates :position, numericality: true

  before_validation :generate_parameter

  def length
    finish_time.to_f - start_time.to_f
  end

  def generate_parameter
    if self.new_record?
        youtube_id = getVideoIdFromUrl(url)
      youtube_data = getMetaDataFromYoutubeWithId(youtube_id)
      get_duration = get_youtube_duration(youtube_data)
      self.start_time = 0
      self.finish_time = get_duration
      self.duration = get_duration
      self.title = get_youtube_title(youtube_data)
      self.thumbnail = get_youtube_thumbnail(youtube_data)
    end
  end

  def getMetaDataFromYoutubeWithId(youtube_id)
        JSON.parse(open("http://gdata.youtube.com/feeds/api/videos/\#{youtube_id}?v=2&alt=json&prettyprint=true").read)
  end

  def get_youtube_thumbnail(data)
    data['entry']['media$group']['media$thumbnail'][1]['url']
  end

  def get_youtube_title(data)
    data['entry']['title']['$t']
  end

  def get_youtube_duration(data)
    data['entry']['media$group']['yt$duration']['seconds']
  end

  def getVideoIdFromUrl(url)
    url_params = CGI.parse(URI.parse(url).query) 
    url_params['v'][0]
  end
end






class Flashcard < ActiveRecord::Base
  attr_accessible :back, :content_id, :front, :time_in_lesson
  belongs_to :content
  validates_presence_of :time_in_lesson, :content, :front, :back
end




module Indexer
  INDEXED = { "Lesson" => [:title], "Question" => [:title] }

  def self.index_models
    INDEXED.each do |model, attribs|
        attribs.each do |attrib|
          model.constantize.all.each do |instance|
            text = instance.send(attrib)
          self.index_words(text, model, instance.id)
        end
      end
    end
  end

  def index_attributes
    indexed_attribs = INDEXED[self.class.to_s]
    indexed_attribs.each do |attrib|
        text = self.send(attrib)
      Indexer.index_words(text, self.class.name, self.id)
    end
  end

  def self.index_words(text, searchable_type, searchable_id)
    unless text.nil?
      indexable_word_sequences(text, 3).each do |word|
          Search.create(
            term: word,
          searchable_type: searchable_type,
          searchable_id: searchable_id )
      end
    end
  end

  private 

  def self.indexable_word_sequences(text, max_words_per_sequence)
    words = text.split(' ').map(&:downcase)
    (1..max_words_per_sequence).map do |num_words|
        words.each_cons(num_words).map { |a| a.join(' ') }
    end.flatten
  end
end



class Lesson < ActiveRecord::Base
  include VotableHelper
  include Indexer
  default_scope order('votes_count DESC')

  attr_accessible :creator_id, :title, :contents_attributes

  belongs_to :creator, class_name: "User"
  has_many :user_lessons
  has_many :users, through: :user_lessons
  has_many :questions, through: :contents
  has_many :votes, as: :votable
  has_many :searches, as: :searchable
  has_many :contents, inverse_of: :lesson, dependent: :destroy
  validates_presence_of :title, :contents

  accepts_nested_attributes_for :contents, :reject_if => lambda { |a| a[:url].blank? }, :allow_destroy => true

  after_save :index_attributes

  def relevant_search_result_info
    user_lessons.size
  end
end




class Question < ActiveRecord::Base
  include VotableHelper
  include Indexer

  attr_accessible :content_id, :text, :time_in_lesson, :title

  belongs_to :content
  belongs_to :user
  delegate :lesson_id, to: :content
  belongs_to :searchable, polymorphic: true
  has_many :answers
  has_many :votes, as: :votable

  after_save :index_attributes
  validates_presence_of :content, :time_in_lesson, :title

  def relevant_search_result_info
    answers.size
  end
end




class Search < ActiveRecord::Base
  attr_accessible :searchable_id, :searchable_type, :term
  belongs_to :searchable, polymorphic: true
  validates_uniqueness_of :term, scope: [:searchable_id, :searchable_type]

  def self.search(query)
    Rails.cache.fetch(query) do
      results = select("DISTINCT searchable_id, searchable_type").
        where('term LIKE ?', '%' + query + '%').
        includes(:searchable)
      records = results.map(&:searchable)
      records.partition { |record| record.is_a? Lesson }
    end
  end
end




class User < ActiveRecord::Base
  attr_accessible :email, :oauth_token
  has_many :user_lessons
  has_many :lessons, through: :user_lessons
  has_many :created_lessons, class_name: 'Lesson', foreign_key: 'creator_id'
  has_many :votes
  has_many :questions
  has_many :answers

 validates_presence_of :oauth_token, :uid, :name

  def self.from_omniauth(auth)
    where(uid: auth.uid).first_or_initialize do |user|
      user.provider = auth.provider
      user.uid = auth.uid
      user.name = auth.info.name
      user.email = auth.info.email
      user.oauth_token = auth.credentials.token
      user.oauth_expires_at = Time.at(auth.credentials.expires_at)
      user.save!
    end
  end
end




class UserLesson < ActiveRecord::Base
  attr_accessible :lesson_id, :user_id
  belongs_to :user
  belongs_to :lesson
  validates_uniqueness_of :user_id, scope: [:lesson_id]
end




class Vote < ActiveRecord::Base
  belongs_to :votable, polymorphic: true, counter_cache: true
  belongs_to :user
  attr_accessible :direction, :user_id, :votable_id, :votable_type
  validates_uniqueness_of :votable_id, scope: [:user_id]
end
